{"version":3,"sources":["helpers/store.js","components/Cell.js","components/GameMessage.js","utils/constants.js","helpers/getAvailableWindowSize.js","helpers/getCellSize.js","components/Grid.js","components/ProgressBar.js","data/initialState.js","utils/utils.js","helpers/rand.js","helpers/pickRandom.js","helpers/decNumber.js","helpers/getNumberOfCells.js","components/Game.js","index.js","helpers/pool.js","connect.js"],"names":["Store","action$","scan","state","fn","R","Function","Error","skipDuplicates","getStyle","size","width","height","fontSize","Math","round","lineHeight","Cell","props","cell","onClick","className","style","classNames","type","inner","WAIT","label","TAP","countdown","require","GameMessage","gameIsLose","levelComplete","startingMessage","level","score","circleAnimationFrame","opacity","circleAnimationTiming","duration","iterations","getAvailableWindowSize","availHeight","window","innerHeight","innerWidth","getCellSize","length","floor","sqrt","Grid","onCellTap","cells","map","i","key","ProgressBar","circle","React","createRef","this","current","animate","nextProps","value","ref","Component","initialState","gameIsPassed","best","isGameInProgress","isLevelCompleted","rand","min","max","random","pickRandom","xs","decNumber","x","Object","getNumberOfCells","lvl","connect","send","ReactDOM","render","newCellTimer","pool","K","_plug","plug","bind","Property","Stream","Observable","constant","swipe$","document","body","throttle","_","activateNextLevel","beginNewGame","ticker$","timeOut","interruptGame","updateCells","state$","startGame","initCells","activateRandomCell","startLevel","switchWaitToTap","numberOfCells","index","offCells","offCell","clearTimeout","setTimeout","loseStatus","streamsToProps","ComponentToWrap","activePanel","id","theme","noShadow","props$","leading","sb","observe","data","setState","unsubscribe","createElement","children","getElementById"],"mappings":"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","file":"static/js/main.4c7b8980.chunk.js","sourcesContent":["import * as R from '@paqmind/ramda'\n\nfunction Store (action$) {\n  return action$\n    .scan((state, fn) => {\n      if (R.is(Function, fn)) {\n        return fn(state)\n      } else {\n        throw Error(`dispatched value must be a function, got ${typeof fn}`)\n      }\n    }, null)\n    .skipDuplicates()\n}\n\nexport default Store\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nconst getStyle = (size) => ({\n  width: `${size}px`,\n  height: `${size}px`,\n  fontSize: `${Math.round(size / 4)}px`,\n  lineHeight: `${Math.round(size / 2.2)}px`\n})\n\nconst Cell = (props) => {\n  const { cell, size, onClick } = props\n\n  return <div className=\"cell\" onClick={onClick} style={getStyle(size)}>\n    <div className={classNames(cell.type, {\n      inner: true,\n      WAIT: cell.label === 'WAIT',\n      TAP: cell.label === 'TAP'\n    })}>\n      <div>{cell.label === 'off' ? null : cell.label}</div>\n      <div>{cell.countdown == null ? null : cell.countdown}</div>\n    </div>\n  </div>\n}\n\nCell.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  cell: PropTypes.object.isRequired,\n  size: PropTypes.number.isRequired\n}\n\nexport default Cell\n","import React from 'react'\nimport PropTypes from 'prop-types'\nconst classNames = require('classnames')\n\nconst getStyle = (size) => {\n  return {\n    width: size,\n    height: size,\n    fontSize: `${Math.round(size / 8)}px`\n  }\n}\n\nconst GameMessage = (props) => {\n  const { state, size } = props\n\n  return <div className={classNames({\n    'show-message': state.gameIsLose || state.levelComplete || state.startingMessage,\n    'hide-message': !state.gameIsLose && !state.levelComplete && !state.startingMessage\n  })} style={getStyle(size)}>\n    <div>\n      <div>\n        {\n          state.gameIsLose\n            ? 'You lose'\n            : state.levelComplete\n              ? `Level ${state.level} complete!`\n              : state.startingMessage\n                ? 'How to play?'\n                : null\n        }\n      </div>\n\n      <div>\n        {\n          state.gameIsLose\n            ? `Score: ${state.score}`\n            : state.levelComplete\n              ? 'Get ready!'\n              : state.startingMessage\n                ? <div className=\"rules\">\n                  <div>{'Tap a tile when it turns green.'}</div>\n                  <div>{'You win when no more tile is available.'}</div>\n                  <div>{\"Don't miss any or the game ends!\"}</div>\n                </div>\n                : null\n        }\n      </div>\n\n      <div>\n        {state.gameIsLose || state.startingMessage ? 'Swipe to start new game' : 'Swipe to start next level'}\n      </div>\n    </div>\n  </div>\n}\n\nGameMessage.propTypes = {\n  state: PropTypes.object.isRequired,\n  size: PropTypes.number.isRequired\n}\n\nexport default GameMessage\n","export const windowPadding = 100\nexport const gridPadding = 20\n\nexport const circleAnimationFrame = [\n  { width: '60px', height: '60px', opacity: '1' },\n  { width: '120px', height: '120px', opacity: '0' }\n]\n\nexport const circleAnimationTiming = {\n  duration: 600,\n  iterations: 1\n}\n","import { windowPadding, gridPadding } from '../utils/constants'\n\nconst getAvailableWindowSize = () => {\n  const availHeight = window.innerHeight - windowPadding\n\n  return window.innerWidth > availHeight\n    ? availHeight - gridPadding\n    : window.innerWidth - gridPadding\n}\n\nexport default getAvailableWindowSize\n","import getAvailableWindowSize from './getAvailableWindowSize'\n\nconst getCellSize = (length) => {\n  return Math.floor(getAvailableWindowSize() / Math.sqrt(length))\n}\n\nexport default getCellSize\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport Cell from './Cell'\nimport GameMessage from './GameMessage'\n\nimport getCellSize from '../helpers/getCellSize'\nimport getAvailableWindowSize from '../helpers/getAvailableWindowSize'\n\nconst getStyle = () => {\n  const size = getAvailableWindowSize()\n\n  return {\n    width: size,\n    height: size\n  }\n}\n\nconst Grid = (props) => {\n  const { state, onCellTap } = props\n  const size = getCellSize(state.cells.length)\n\n  return <div className=\"grid\" style={getStyle()}>\n    <GameMessage size={getAvailableWindowSize()}\n      state={state} />\n\n    {state.cells.map((cell, i) =>\n      <Cell className=\"game-cell\"\n        cell={cell} size={size}\n        onClick={() => onCellTap(cell)}\n        key={i}/>\n    )}\n  </div>\n}\n\nGrid.propTypes = {\n  state: PropTypes.object.isRequired,\n  onCellTap: PropTypes.func.isRequired\n}\n\nexport default Grid\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { circleAnimationFrame, circleAnimationTiming } from '../utils/constants'\n\nclass ProgressBar extends Component {\n  constructor (props) {\n    super(props)\n    this.circle = React.createRef()\n  }\n\n  animate () {\n    this.circle.current.animate(\n      circleAnimationFrame,\n      circleAnimationTiming\n    )\n  }\n\n  componentDidUpdate (nextProps) {\n    if (this.props.value !== nextProps.value) {\n      this.animate()\n    }\n  }\n\n  render () {\n    const { label, value } = this.props\n\n    return <div className=\"progress-bar\">\n      <div>{ label }</div>\n      <div>{ value }</div>\n\n      <div ref={this.circle}\n        className=\"animation-circle\">\n      </div>\n    </div>\n  }\n}\n\nProgressBar.propTypes = {\n  label: PropTypes.string.isRequired,\n  value: PropTypes.number.isRequired\n}\n\nexport default ProgressBar\n","\nexport const initialState = {\n  cells: [], // {label :: \"off\" | \"WAIT\" | \"TAP\", countdown :: Number | Null, index :: Number}\n  level: 1,\n  levelComplete: false,\n  startingMessage: true,\n  gameIsLose: false,\n  gameIsPassed: false,\n  score: 0,\n  best: 0\n}\n","import * as R from '@paqmind/ramda'\n\nexport const isGameInProgress = R.compose(\n  R.all(R.equals(R.F())),\n  R.values,\n  R.pick([\n    'gameIsLose',\n    'levelComplete',\n    'gameIsPassed',\n    'startingMessage'\n  ])\n)\n\nexport const isLevelCompleted = R.propEq(\n  'levelComplete',\n  R.T()\n)\n","const rand = (min, max) => min + Math.floor(Math.random() * max)\n\nexport default rand\n","import rand from './rand'\n\nconst pickRandom = (xs) => xs[rand(0, xs.length)]\n\nexport default pickRandom\n","import * as R from '@paqmind/ramda'\n\nconst decNumber = (x) => R.is(Object, x)\n  ? (x.countdown >= 2 ? { ...x, countdown: x.countdown - 1 } : x)\n  : null\n\nexport default decNumber\n","const getNumberOfCells = (lvl) => {\n  const size = lvl + 1\n  return size * size\n}\n\nexport default getNumberOfCells\n","import React from 'react'\nimport Store from '../helpers/store'\nimport Grid from './Grid'\nimport ProgressBar from './ProgressBar'\nimport { View, Panel, PanelHeader } from '@vkontakte/vkui'\n\nimport { initialState } from '../data/initialState'\nimport { isGameInProgress, isLevelCompleted } from '../utils/utils'\nimport { connect } from '../connect'\nimport { pool } from '../helpers/pool'\n\nimport pickRandom from '../helpers/pickRandom'\nimport decNumber from '../helpers/decNumber'\nimport getNumberOfCells from '../helpers/getNumberOfCells'\n\nimport * as R from '@paqmind/ramda'\nimport * as K from 'kefir'\n\nR.map2 = R.addIndex(R.map)\n\nexport default function () {\n  let newCellTimer = null\n\n  const action$ = pool()\n\n  const swipe$ = K.fromEvents(document.body, 'touchmove')\n    .throttle(100)\n    .map(_ => function swipe (state) {\n      return R.cond([\n        [isLevelCompleted, activateNextLevel],\n        [R.complement(isGameInProgress), beginNewGame],\n        [R.T, R.always(state)]\n      ])(state)\n    })\n\n  const ticker$ = K.interval(1000).map(_ => function tick (state) {\n    return R.ifElse(\n      timeOut,\n      interruptGame,\n      updateCells\n    )(state)\n  })\n\n  const state$ = Store(K.merge([\n    K.constant(() => initialState),\n    action$,\n    ticker$,\n    swipe$\n  ]))\n\n  // ------------------- game logic -------------------------------------\n\n  const beginNewGame = state => {\n    return R.pipe(\n      startGame,\n      initCells,\n      activateRandomCell\n    )(state)\n  }\n\n  const interruptGame = state => {\n    const { score, best } = state\n\n    return R.pipe(\n      initCells,\n      R.assoc('gameIsLose', R.T),\n      R.assoc('best', score > best ? score : best)\n    )(state)\n  }\n\n  const activateNextLevel = state => {\n    return R.pipe(\n      startLevel,\n      initCells,\n      activateRandomCell\n    )(state)\n  }\n\n  const updateCells = state => {\n    return R.over2(\n      'cells',\n      R.map(R.pipe(switchWaitToTap, decNumber))\n    )(state)\n  }\n\n  function initCells (state) {\n    const numberOfCells = getNumberOfCells(state.level)\n    const cells = R.map2((_, i) => ({\n      label: 'off',\n      countdown: null,\n      index: i\n    }), R.range(0, numberOfCells))\n\n    return {\n      ...state,\n      cells\n    }\n  }\n\n  function startGame (state) {\n    return {\n      ...state,\n      startingMessage: false,\n      gameIsLose: false,\n      gameIsPassed: false,\n      score: 0,\n      level: 1\n    }\n  }\n\n  function startLevel (state) {\n    return {\n      ...state,\n      levelComplete: false,\n      level: R.inc(state.level)\n    }\n  }\n\n  function onCellTap (cell) {\n    function tapHandler (state) {\n      if (cell.countdown != null && cell.label !== 'WAIT') {\n        return {\n          ...state,\n          score: state.score + 1,\n          cells: R.set2([cell.index, 'countdown'],\n            5, R.set2([cell.index, 'label'], 'WAIT', state.cells))\n        }\n      } else {\n        return state\n      }\n    }\n\n    action$.plug(tapHandler)\n  }\n\n  function activateRandomCell (state) {\n    let cells = state.cells\n    const offCells = R.filter(cell => cell.countdown == null, cells)\n\n    if (offCells.length) {\n      const offCell = pickRandom(offCells)\n\n      cells = R.pipe(\n        R.set2([offCell.index, 'countdown'], 5),\n        R.set2([offCell.index, 'label'], 'WAIT')\n      )(state.cells)\n\n      clearTimeout(newCellTimer)\n      newCellTimer = setTimeout(() => {\n        action$.plug(activateRandomCell)\n      }, 6000)\n\n      return R.set2('cells', cells, state)\n    } else {\n      clearTimeout(newCellTimer)\n\n      return R.pipe(\n        initCells,\n        R.assoc('levelComplete', R.T())\n      )(state)\n    }\n  }\n\n  function timeOut (state) {\n    let loseStatus = false\n    state.cells.map(cell => {\n      if (cell.countdown === 1 && cell.label === 'TAP') {\n        loseStatus = true\n        clearTimeout(newCellTimer)\n      }\n    })\n\n    return loseStatus\n  }\n\n  function switchWaitToTap (cell) {\n    return cell.countdown === 1 && cell.label === 'WAIT'\n      ? { label: 'TAP', countdown: 4, index: cell.index }\n      : cell\n  }\n\n  // function gameIsPassed (state) {\n  //   return {\n  //     ...state,\n  //     gameIsPassed: true\n  //   }\n  // }\n\n  // function startLevelBtnHandler () {\n  //   action$.plug(startLevel)\n  //   action$.plug(initCells)\n  //   action$.plug(activateRandomCell)\n  // }\n\n  // function startNewGameBtnHandler () {\n  //   action$.plug(startGame)\n  //   action$.plug(initCells)\n  //   action$.plug(activateRandomCell)\n  // }\n\n  action$.plug(initCells)\n\n  // --------------------------------------------------------------------\n\n  const Component = connect(\n    { state: state$ },\n    ({ state }) => <View activePanel=\"main\">\n      <Panel id=\"main\" theme={'white'}>\n        <PanelHeader theme={'alternate'} noShadow={true}>\n          Switch\n        </PanelHeader>\n\n        <div className=\"game\">\n          <div className=\"game-progress\">\n            <ProgressBar label={'Level'}\n              value={state.level} />\n\n            <ProgressBar label={'Score'}\n              value={state.score} />\n\n            <ProgressBar label={'Best'}\n              value={state.best} />\n          </div>\n\n          <Grid state={state}\n            onCellTap={onCellTap}/>\n        </div>\n      </Panel>\n    </View>\n  )\n\n  return <Component/>\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport Game from './components/Game'\nimport connect from '@vkontakte/vk-connect'\nimport '@vkontakte/vkui/dist/vkui.css'\nimport './styles/main.scss'\n\nconnect.send(\"VKWebAppInit\", {})\n\nReactDOM.render(\n  <Game/>,\n  document.getElementById('app')\n)\n","import K from 'kefir'\n\nexport const pool = () => {\n  const pool = K.pool()\n  const _plug = pool.plug.bind(pool)\n  pool.plug = function (x) {\n    if (x instanceof K.Property || x instanceof K.Stream || x instanceof K.Observable) {\n      _plug(x)\n    } else {\n      _plug(K.constant(x))\n    }\n  }\n  return pool\n}\n","import React, { Component } from 'react'\nimport * as R from '@paqmind/ramda'\nimport * as K from 'kefir'\n\nexport const connect = (streamsToProps, ComponentToWrap) => {\n  class Container extends Component {\n    constructor (props) {\n      super(props)\n      this.state = {}\n    }\n\n    UNSAFE_componentWillMount () {\n      const props$ = K.combine(streamsToProps)\n        .throttle(20, { leading: false })\n\n      this.sb = props$.observe(data => {\n        this.setState(data)\n      })\n    }\n\n    componentWillUnmount () {\n      this.sb.unsubscribe()\n    }\n\n    render () {\n      return React.createElement(ComponentToWrap, R.merge(this.props, this.state), this.props.children)\n    }\n  }\n\n  return Container\n}\n"],"sourceRoot":""}