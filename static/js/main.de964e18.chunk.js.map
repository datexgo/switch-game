{"version":3,"sources":["connect.js","helpers/store.js","data/initialState.js","helpers/pool.js","components/Cell.js","components/GameMessage.js","helpers/getAvailableWindowSize.js","helpers/getCellSize.js","components/Grid.js","helpers/rand.js","helpers/pickRandom.js","helpers/decNumber.js","helpers/getNumberOfCells.js","components/Game.js","index.js"],"names":["K","require","R","Store","action$","scan","state","fn","Function","Error","skipDuplicates","initialState","cells","level","levelComplete","startingMessage","gameIsLose","gameIsPassed","score","best","pool","_plug","plug","bind","x","Property","Stream","Observable","constant","getStyle","size","width","height","fontSize","Math","round","lineHeight","Cell","props","cell","onClick","className","style","classNames","type","label","countdown","getButtonStyle","GameMessage","startNewGame","startNextLevel","getAvailableWindowSize","availHeight","window","innerHeight","innerWidth","getCellSize","length","floor","sqrt","margin","position","Grid","onCellTap","map","i","key","rand","min","max","random","pickRandom","xs","decNumber","Object","getNumberOfCells","lvl","ReactDOM","render","newCellTimer","ticker$","interval","_","loseStatus","clearTimeout","initCells","switchWaitToTap","state$","merge","numberOfCells","index","startGame","startLevel","activateRandomCell","offCells","offCell","setTimeout","startLevelBtnHandler","startNewGameBtnHandler","streamsToProps","ComponentToWrap","Component","props$","combine","throttle","leading","this","sb","observe","data","setState","unsubscribe","React","createElement","children","document","getElementById"],"mappings":"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","file":"static/js/main.de964e18.chunk.js","sourcesContent":["import React, { Component } from 'react'\nlet K = require('kefir')\nlet R = require('ramda')\n\nexport let connect = (streamsToProps, ComponentToWrap) => {\n  class Container extends Component {\n    constructor(props) {\n      super(props)\n      this.state = {}\n    }\n\n    componentWillMount() {\n      let props$ = K.combine(streamsToProps)\n        .throttle(20, {leading: false})\n\n      this.sb = props$.observe(data => {\n        this.setState(data)\n      })\n    }\n\n    componentWillUnmount() {\n      this.sb.unsubscribe()\n    }\n\n    render() {\n      return React.createElement(ComponentToWrap, R.merge(this.props, this.state), this.props.children)\n    }\n  }\n\n  return Container\n}","import * as R from \"@paqmind/ramda\"\n\nfunction Store(action$) {\n  return action$\n    .scan((state, fn) => {\n      if (R.is(Function, fn)) {\n        return fn(state)\n      } else {\n        throw Error(`dispatched value must be a function, got ${typeof fn}`)\n      }\n    }, null)\n    .skipDuplicates()\n}\n\nexport default Store","\nconst initialState = {\n  cells: [], // {label :: \"off\" | \"WAIT\" | \"TAP\", countdown :: Number | Null, index :: Number}\n  level: 1,\n  levelComplete: false,\n  startingMessage: true,\n  gameIsLose: false,\n  gameIsPassed: false,\n  score: 0,\n  best: 0\n}\n\nexport default initialState","let K = require('kefir')\n\nfunction pool() {\n  let pool = K.pool()\n  let _plug = pool.plug.bind(pool)\n  pool.plug = function (x) {\n    if (x instanceof K.Property || x instanceof K.Stream || x instanceof K.Observable) {\n      _plug(x)\n    } else {\n      _plug(K.constant(x))\n    }\n  }\n  return pool\n}\n\nexport default pool","import React from \"react\"\nimport PropTypes from 'prop-types'\nimport classNames from \"classnames\"\n\nlet getStyle = (size) =>({\n  width: `${size}px`,\n  height: `${size}px`,\n  fontSize: `${Math.round(size / 4)}px`,\n  lineHeight: `${Math.round(size / 2.2)}px`\n})\n\nlet Cell = (props) => {\n  let {cell, size, onClick} = props\n\n  return <div className=\"cell\" onClick={onClick} style={getStyle(size)}>\n    <div className={classNames(cell.type, {\n      \"inner\": true,\n      \"WAIT\": cell.label == \"WAIT\",\n      \"TAP\": cell.label == \"TAP\"\n    })}>\n      <div>{cell.label == \"off\" ? null : cell.label}</div>\n      <div>{cell.countdown == null ? null : cell.countdown}</div>\n    </div>\n  </div>\n}\n\nCell.propTypes = {\n  onClick: PropTypes.func.isRequired\n}\n\nexport default Cell","import React from 'react'\nimport PropTypes from 'prop-types'\nlet classNames = require('classnames')\n\nlet getStyle = (size) => {\n  return {\n    width: size,\n    height: size,\n    fontSize: `${Math.round(size / 8)}px`\n  }\n}\n\nlet getButtonStyle = (size) => {\n  return {\n    width: `${Math.round(size / 2)}px`,\n    height: `${Math.round(size / 7)}px`,\n    fontSize: `${Math.round(size / 20)}px`\n  }\n}\n\nconst GameMessage = (props) => {\n  let state = props.state\n  return <div className={classNames({\n    \"show-message\": state.gameIsLose || state.levelComplete || state.startingMessage,\n    \"hide-message\": !state.gameIsLose && !state.levelComplete && !state.startingMessage\n  })} style={getStyle(props.size)}>\n    <div>\n      <div>\n        {\n          state.gameIsLose\n            ? \"You lose\"\n            : state.levelComplete\n              ? `Level ${state.level} complete!`\n              : state.startingMessage\n                ? \"How to play?\"\n                : null\n        }\n      </div>\n      <div>\n        {\n          state.gameIsLose\n            ? `Score: ${state.score}`\n            : state.levelComplete\n              ? \"Get ready!\"\n              : state.startingMessage\n                ? <div className=\"rules\">\n                    <div>{\"Tap a tile when it turns green.\"}</div>\n                    <div>{\"You win when no more tile is available.\"}</div>\n                    <div>{\"Don't miss any or the game ends!\"}</div>\n                  </div>\n                : null\n        }\n      </div>\n      <button className=\"button\"\n              onClick={state.gameIsLose || state.startingMessage ? props.startNewGame : props.startNextLevel}\n              style={getButtonStyle(props.size)}>\n        {state.gameIsLose || state.startingMessage ? \"Start new game\" : \"Start next level\"}\n      </button>\n    </div>\n  </div>\n}\n\nGameMessage.propTypes = {\n  startNewGame: PropTypes.func.isRequired,\n  startNextLevel: PropTypes.func.isRequired\n}\n\nexport default GameMessage","let getAvailableWindowSize = () => {\n  let availHeight = window.innerHeight - 200\n  return window.innerWidth > availHeight\n    ? availHeight - 20\n    : window.innerWidth - 20\n}\n\nexport default getAvailableWindowSize\n","import getAvailableWindowSize from \"./getAvailableWindowSize\"\n\nlet getCellSize = (length) => {\n  return Math.floor(getAvailableWindowSize() / Math.sqrt(length))\n}\n\nexport default getCellSize\n","import React from \"react\"\nimport PropTypes from 'prop-types'\nimport Cell from \"./Cell\"\nimport GameMessage from './GameMessage'\nimport getCellSize from \"../helpers/getCellSize\"\nimport getAvailableWindowSize from \"../helpers/getAvailableWindowSize\"\n\nlet getStyle = () => {\n  let size = getAvailableWindowSize()\n  return {\n    width: size,\n    height: size,\n    margin: \"0 auto\",\n    position: \"relative\"\n  }\n}\n\nlet Grid = (props) => {\n  let {state, onCellTap, startNewGame, startNextLevel} = props\n  let size = getCellSize(state.cells.length)\n\n  return <div className=\"grid\" style={getStyle()}>\n    <GameMessage size={getAvailableWindowSize()}\n                 state={state}\n                 startNewGame={startNewGame}\n                 startNextLevel={startNextLevel}\n    />\n    {state.cells.map((cell, i) =>\n      <Cell className=\"game-cell\"\n            cell={cell} size={size}\n            onClick={() => onCellTap(cell)}\n            key={i}/>\n    )}\n  </div>\n}\n\nGrid.propTypes = {\n  onCellTap: PropTypes.func.isRequired\n}\n\nexport default Grid","const rand = (min, max) => min + Math.floor(Math.random() * max)\n\nexport default rand","import rand from './rand'\n\nconst pickRandom = (xs) => xs[rand(0, xs.length)]\n\nexport default pickRandom","import * as R from '@paqmind/ramda'\n\nconst decNumber = (x) => R.is (Object, x)\n  ? (x.countdown >= 2 ? {...x, countdown: x.countdown - 1} : x)\n  : null\n\nexport default decNumber","let getNumberOfCells = (lvl) => {\n  let size = lvl + 1\n  return size * size\n}\n\nexport default getNumberOfCells\n","import React, { Component } from \"react\"\nimport {connect} from '../connect'\nimport Store from '../helpers/store'\nimport initialState from '../data/initialState'\nimport pool from '../helpers/pool'\nimport Grid from \"./Grid\"\nimport * as R from \"@paqmind/ramda\"\nimport pickRandom from '../helpers/pickRandom'\nimport decNumber from '../helpers/decNumber'\nimport getNumberOfCells from \"../helpers/getNumberOfCells\"\nR.map2 = R.addIndex(R.map)\nlet K = require('kefir')\n\nexport default function() {\n\n  let newCellTimer\n\n  let action$ = pool()\n  let ticker$ = K.interval(1000).map(_ => function tick(state) {\n    let {score, best} = state\n\n    if (gameIsLose(state)) {\n      return R.merge(initCells(state), {gameIsLose: true, best: score > best ? score : best})\n    } else {\n      return R.over2(\"cells\", R.map(R.pipe(switchWaitToTap, decNumber)), state)\n    }\n  })\n\n  let state$ = Store(K.merge([\n    K.constant(() => initialState),\n    action$,\n    ticker$\n  ]))\n\n  //------------------- game logic -------------------------------------\n\n  function initCells(state) {\n    let numberOfCells = getNumberOfCells(state.level)\n    let cells = R.map2((_, i) => ({\n      label: \"off\",\n      countdown: null,\n      index: i,\n    }), R.range(0, numberOfCells))\n\n    return {\n      ...state,\n      cells\n    }\n  }\n\n  function startGame(state) {\n    return {\n      ...state,\n      startingMessage: false,\n      gameIsLose: false,\n      gameIsPassed: false,\n      score: 0,\n      level: 1\n    }\n  }\n\n  function startLevel(state) {\n    return {\n      ...state,\n      levelComplete: false,\n      level: R.inc(state.level)\n    }\n  }\n\n  function onCellTap(cell) {\n    function tapHandler(state) {\n      if (cell.countdown != null && cell.label != \"WAIT\") {\n        return {\n          ...state,\n          score: state.score + 1,\n          cells: R.set2([cell.index, \"countdown\"],\n            5, R.set2([cell.index, \"label\"], \"WAIT\", state.cells))\n        }\n      } else {\n        return state\n      }\n    }\n\n    action$.plug(tapHandler)\n  }\n\n  function activateRandomCell(state) {\n    let cells = state.cells\n    let offCells = R.filter(cell => cell.countdown == null, cells)\n\n    if (offCells.length) {\n      let offCell = pickRandom(offCells)\n      cells = R.set2([offCell.index, \"countdown\"],\n        5, R.set2([offCell.index, \"label\"], \"WAIT\", state.cells))\n\n      newCellTimer = setTimeout(() => action$.plug(activateRandomCell), 6000)\n\n      return {\n        ...state,\n        cells\n      }\n    }\n\n    else {\n      clearTimeout(newCellTimer)\n      return R.merge(initCells(state), {levelComplete: true})\n    }\n  }\n\n  function gameIsLose(state) {\n    let loseStatus = false\n    state.cells.map(cell => {\n      if (cell. countdown == 1 && cell.label == \"TAP\") {\n        loseStatus = true\n        clearTimeout(newCellTimer)\n      }\n    })\n\n    return loseStatus\n  }\n\n  function switchWaitToTap(cell) {\n    return cell.countdown == 1 && cell.label == \"WAIT\"\n      ? {label: \"TAP\", countdown: 4, index: cell.index}\n      : cell\n  }\n\n  function gameIsPassed(state) {\n    return {\n      ...state,\n      gameIsPassed: true\n    }\n  }\n\n  function startLevelBtnHandler() {\n    action$.plug(startLevel)\n    action$.plug(initCells)\n    action$.plug(activateRandomCell)\n  }\n\n  function startNewGameBtnHandler() {\n    action$.plug(startGame)\n    action$.plug(initCells)\n    action$.plug(activateRandomCell)\n  }\n\n  action$.plug(initCells)\n\n  //--------------------------------------------------------------------\n\n  let Component = connect(\n    {state: state$},\n    ({state}) => <div className=\"game\">\n      <h2>{`Level: ${state.level} — Score: ${state.score} — Best: ${state.best}`}</h2>\n      <Grid startNewGame={startNewGameBtnHandler}\n            startNextLevel={startLevelBtnHandler}\n            state={state}\n            onCellTap={onCellTap}/>\n    </div>\n  )\n\n  return <Component/>\n}","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport Game from \"./components/Game\"\nimport \"./styles/main.scss\"\n\nReactDOM.render(\n  <Game/>,\n  document.getElementById(\"app\")\n)"],"sourceRoot":""}