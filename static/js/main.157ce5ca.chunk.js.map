{"version":3,"sources":["helpers/store.js","utils/utils.js","components/Cell.js","components/GameMessage.js","utils/constants.js","helpers/getAvailableWindowSize.js","helpers/getCellSize.js","components/Grid.js","components/ProgressBar.js","data/initialState.js","helpers/rand.js","helpers/pickRandom.js","helpers/decNumber.js","helpers/getNumberOfCells.js","components/Game.js","index.js","helpers/pool.js","connect.js"],"names":["Store","action$","scan","state","fn","R","Function","Error","skipDuplicates","isGameInProgress","isLevelCompleted","getBestScoreFromVkStorage","Number","getStyle","size","width","height","fontSize","Math","round","lineHeight","Cell","props","cell","onClick","className","style","classNames","type","inner","WAIT","label","TAP","cellText","countdown","require","GameMessage","gameIsLose","levelComplete","startingMessage","level","score","circleAnimationFrame","opacity","offset","circleAnimationTiming","duration","iterations","getAvailableWindowSize","availHeight","window","innerHeight","innerWidth","getCellSize","length","floor","sqrt","Grid","onCellTap","cells","map","i","key","ProgressBar","animation","circle","React","createRef","this","current","animate","nextProps","value","ref","Component","initialState","gameIsPassed","best","rand","min","max","random","pickRandom","xs","decNumber","x","Object","getNumberOfCells","lvl","connect","send","ReactDOM","render","newCellTimer","pool","K","_plug","plug","bind","Property","Stream","Observable","constant","sendPromise","keys","onValue","result","swipe$","document","body","throttle","_","activateNextLevel","beginNewGame","ticker$","timeOut","interruptGame","updateCells","state$","startGame","initCells","activateRandomCell","bestScore","String","startLevel","switchWaitToTap","numberOfCells","index","offCells","offCell","clearTimeout","setTimeout","loseStatus","streamsToProps","ComponentToWrap","activePanel","id","theme","transparent","noShadow","props$","leading","sb","observe","data","setState","unsubscribe","createElement","children","getElementById"],"mappings":"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","file":"static/js/main.157ce5ca.chunk.js","sourcesContent":["import * as R from '@paqmind/ramda'\n\nfunction Store (action$) {\n  return action$\n    .scan((state, fn) => {\n      if (R.is(Function, fn)) {\n        return fn(state)\n      } else {\n        throw Error(`dispatched value must be a function, got ${typeof fn}`)\n      }\n    }, null)\n    .skipDuplicates()\n}\n\nexport default Store\n","import * as R from '@paqmind/ramda'\n\nexport const isGameInProgress = R.compose(\n  R.all(R.equals(R.F())),\n  R.values,\n  R.pick([\n    'gameIsLose',\n    'levelComplete',\n    'gameIsPassed',\n    'startingMessage'\n  ])\n)\n\nexport const isLevelCompleted = R.propEq(\n  'levelComplete',\n  R.T()\n)\n\nexport const getBestScoreFromVkStorage = R.pipe(\n  R.prop('keys'),\n  R.find(R.propEq('key', 'switchBest')),\n  R.prop('value'),\n  Number,\n  R.defaultTo(0)\n)\n\nexport const cellText = cell => {\n  return cell.label === 'WAIT' ? 'ЖДИ' : 'ЖМИ'\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport { cellText } from '../utils/utils'\n\nconst getStyle = (size) => ({\n  width: `${size}px`,\n  height: `${size}px`,\n  fontSize: `${Math.round(size / 4)}px`,\n  lineHeight: `${Math.round(size / 2.2)}px`\n})\n\nconst Cell = (props) => {\n  const { cell, size, onClick } = props\n\n  return <div className=\"cell\" onClick={onClick} style={getStyle(size)}>\n    <div className={classNames(cell.type, {\n      inner: true,\n      WAIT: cell.label === 'WAIT',\n      TAP: cell.label === 'TAP'\n    })}>\n      <div>{cell.label === 'off' ? null : cellText(cell)}</div>\n      <div>{cell.countdown == null ? null : cell.countdown}</div>\n    </div>\n  </div>\n}\n\nCell.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  cell: PropTypes.object.isRequired,\n  size: PropTypes.number.isRequired\n}\n\nexport default Cell\n","import React from 'react'\nimport PropTypes from 'prop-types'\nconst classNames = require('classnames')\n\nconst getStyle = (size) => {\n  return {\n    width: size,\n    height: size,\n    fontSize: `${Math.round(size / 8)}px`\n  }\n}\n\nconst GameMessage = (props) => {\n  const { state, size } = props\n\n  return <div className={classNames({\n    'show-message': state.gameIsLose || state.levelComplete || state.startingMessage,\n    'hide-message': !state.gameIsLose && !state.levelComplete && !state.startingMessage\n  })} style={getStyle(size)}>\n    <div className={'message'}>\n      <div>\n        {\n          state.gameIsLose\n            ? <div className={'rules-header'}>Попробуй снова</div>\n            : state.levelComplete\n              ? <div className={'rules-header'}>Уровень { state.level } пройден</div>\n              : state.startingMessage\n                ? <div className={'rules-header'}>Правила</div>\n                : null\n        }\n\n        <div>\n          {\n            state.gameIsLose\n              ? `Счет: ${state.score}`\n              : state.levelComplete\n                ? <div className={'get-ready'}>Приготовься!</div>\n                : state.startingMessage\n                  ? <div className=\"rules\">\n                    <div>{'Жми на бирюзовые ячейки.'}</div>\n                    <div>{'Уровень завершится, когда не останется свободных клеток.'}</div>\n                    <div>{'Не упусти ни одной!'}</div>\n                  </div>\n                  : null\n          }\n        </div>\n      </div>\n\n      <div className={'swipe'}>\n        <div className={'swipe-header'}>\n          Свайпни\n        </div>\n\n        <div className={'swipe-tip'}>\n          {state.gameIsLose || state.startingMessage\n            ? 'и играй'\n            : 'и продолжи'\n          }\n        </div>\n      </div>\n    </div>\n  </div>\n}\n\nGameMessage.propTypes = {\n  state: PropTypes.object.isRequired,\n  size: PropTypes.number.isRequired\n}\n\nexport default GameMessage\n","export const windowPadding = 100\nexport const gridPadding = 20\n\nexport const circleAnimationFrame = [\n  { width: '60px', height: '60px', opacity: '0' },\n  { width: '90px', height: '90px', opacity: '0.1', offset: 0.3 },\n  { width: '110px', height: '110px', opacity: '0' }\n]\n\nexport const circleAnimationTiming = {\n  duration: 600,\n  iterations: 1\n}\n","import { windowPadding, gridPadding } from '../utils/constants'\n\nconst getAvailableWindowSize = () => {\n  const availHeight = window.innerHeight - windowPadding\n\n  return window.innerWidth > availHeight\n    ? availHeight - gridPadding\n    : window.innerWidth - gridPadding\n}\n\nexport default getAvailableWindowSize\n","import getAvailableWindowSize from './getAvailableWindowSize'\n\nconst getCellSize = (length) => {\n  return Math.floor(getAvailableWindowSize() / Math.sqrt(length))\n}\n\nexport default getCellSize\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport Cell from './Cell'\nimport GameMessage from './GameMessage'\n\nimport getCellSize from '../helpers/getCellSize'\nimport getAvailableWindowSize from '../helpers/getAvailableWindowSize'\n\nconst getStyle = () => {\n  const size = getAvailableWindowSize()\n\n  return {\n    width: size,\n    height: size\n  }\n}\n\nconst Grid = (props) => {\n  const { state, onCellTap } = props\n  const size = getCellSize(state.cells.length)\n\n  return <div className=\"grid\" style={getStyle()}>\n    <GameMessage size={getAvailableWindowSize()}\n      state={state} />\n\n    {state.cells.map((cell, i) =>\n      <Cell className=\"game-cell\"\n        cell={cell} size={size}\n        onClick={() => onCellTap(cell)}\n        key={i}/>\n    )}\n  </div>\n}\n\nGrid.propTypes = {\n  state: PropTypes.object.isRequired,\n  onCellTap: PropTypes.func.isRequired\n}\n\nexport default Grid\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { circleAnimationFrame, circleAnimationTiming } from '../utils/constants'\n\nclass ProgressBar extends Component {\n  constructor (props) {\n    super(props)\n    this.animation = null\n    this.circle = React.createRef()\n  }\n\n  animate () {\n    this.animation = this.circle.current.animate(\n      circleAnimationFrame,\n      circleAnimationTiming\n    )\n  }\n\n  componentDidUpdate (nextProps) {\n    if (this.props.value !== nextProps.value) {\n      this.animate()\n    }\n  }\n\n  render () {\n    const { label, value } = this.props\n\n    return <div className=\"progress-bar\">\n      <div>{ label }</div>\n      <div>{ value }</div>\n\n      <div ref={this.circle}\n        className=\"animation-circle\">\n      </div>\n    </div>\n  }\n}\n\nProgressBar.propTypes = {\n  label: PropTypes.string.isRequired,\n  value: PropTypes.number.isRequired\n}\n\nexport default ProgressBar\n","\nexport const initialState = {\n  cells: [], // {label :: \"off\" | \"WAIT\" | \"TAP\", countdown :: Number | Null, index :: Number}\n  level: 1,\n  levelComplete: false,\n  startingMessage: true,\n  gameIsLose: false,\n  gameIsPassed: false,\n  score: 0,\n  best: 0\n}\n","const rand = (min, max) => min + Math.floor(Math.random() * max)\n\nexport default rand\n","import rand from './rand'\n\nconst pickRandom = (xs) => xs[rand(0, xs.length)]\n\nexport default pickRandom\n","import * as R from '@paqmind/ramda'\n\nconst decNumber = (x) => R.is(Object, x)\n  ? (x.countdown >= 2 ? { ...x, countdown: x.countdown - 1 } : x)\n  : null\n\nexport default decNumber\n","const getNumberOfCells = (lvl) => {\n  const size = lvl + 1\n  return size * size\n}\n\nexport default getNumberOfCells\n","import React from 'react'\nimport Store from '../helpers/store'\nimport Grid from './Grid'\nimport ProgressBar from './ProgressBar'\nimport { View, Panel, PanelHeader } from '@vkontakte/vkui'\nimport connect from '@vkontakte/vk-connect'\n\nimport { initialState } from '../data/initialState'\nimport { isGameInProgress, isLevelCompleted, getBestScoreFromVkStorage } from '../utils/utils'\nimport { connect as attach } from '../connect'\nimport { pool } from '../helpers/pool'\n\nimport pickRandom from '../helpers/pickRandom'\nimport decNumber from '../helpers/decNumber'\nimport getNumberOfCells from '../helpers/getNumberOfCells'\n\nimport * as R from '@paqmind/ramda'\nimport * as K from 'kefir'\n\nR.map2 = R.addIndex(R.map)\n\nexport default function () {\n  let newCellTimer = null\n\n  const action$ = pool()\n\n  const storage$ = K.fromPromise(\n    connect.sendPromise('VKWebAppStorageGet', {\n      keys: ['switchBest']\n    })\n  )\n\n  storage$.onValue(result => {\n    action$.plug(state => {\n      return R.set2('best', getBestScoreFromVkStorage(result), state)\n    })\n  })\n\n  const swipe$ = K.fromEvents(document.body, 'touchmove')\n    .throttle(100)\n    .map(_ => function swipe (state) {\n      return R.cond([\n        [isLevelCompleted, activateNextLevel],\n        [R.complement(isGameInProgress), beginNewGame],\n        [R.T, R.always(state)]\n      ])(state)\n    })\n\n  const ticker$ = K.interval(1000).map(_ => function tick (state) {\n    return R.ifElse(\n      timeOut,\n      interruptGame,\n      updateCells\n    )(state)\n  })\n\n  const state$ = Store(K.merge([\n    K.constant(() => initialState),\n    action$,\n    ticker$,\n    swipe$\n  ]))\n\n  // ------------------- game logic -------------------------------------\n\n  const beginNewGame = state => {\n    return R.pipe(\n      startGame,\n      initCells,\n      activateRandomCell\n    )(state)\n  }\n\n  const interruptGame = state => {\n    const { score, best } = state\n    const bestScore = R.max(score, best)\n\n    connect.send('VKWebAppStorageSet', {\n      key: 'switchBest',\n      value: String(bestScore)\n    })\n\n    return R.pipe(\n      initCells,\n      R.assoc('gameIsLose', R.T),\n      R.assoc('best', bestScore)\n    )(state)\n  }\n\n  const activateNextLevel = state => {\n    return R.pipe(\n      startLevel,\n      initCells,\n      activateRandomCell\n    )(state)\n  }\n\n  const updateCells = state => {\n    return R.over2(\n      'cells',\n      R.map(R.pipe(switchWaitToTap, decNumber))\n    )(state)\n  }\n\n  function initCells (state) {\n    const numberOfCells = getNumberOfCells(state.level)\n    const cells = R.map2((_, i) => ({\n      label: 'off',\n      countdown: null,\n      index: i\n    }), R.range(0, numberOfCells))\n\n    return {\n      ...state,\n      cells\n    }\n  }\n\n  function startGame (state) {\n    return {\n      ...state,\n      startingMessage: false,\n      gameIsLose: false,\n      gameIsPassed: false,\n      score: 0,\n      level: 1\n    }\n  }\n\n  function startLevel (state) {\n    return {\n      ...state,\n      levelComplete: false,\n      level: R.inc(state.level)\n    }\n  }\n\n  function onCellTap (cell) {\n    function tapHandler (state) {\n      if (cell.countdown != null && cell.label !== 'WAIT') {\n        return {\n          ...state,\n          score: state.score + 1,\n          cells: R.set2([cell.index, 'countdown'],\n            5, R.set2([cell.index, 'label'], 'WAIT', state.cells))\n        }\n      } else {\n        return state\n      }\n    }\n\n    action$.plug(tapHandler)\n  }\n\n  function activateRandomCell (state) {\n    let cells = state.cells\n    const offCells = R.filter(cell => cell.countdown == null, cells)\n\n    if (offCells.length) {\n      const offCell = pickRandom(offCells)\n\n      cells = R.pipe(\n        R.set2([offCell.index, 'countdown'], 5),\n        R.set2([offCell.index, 'label'], 'WAIT')\n      )(state.cells)\n\n      clearTimeout(newCellTimer)\n      newCellTimer = setTimeout(() => {\n        action$.plug(activateRandomCell)\n      }, 6000)\n\n      return R.set2('cells', cells, state)\n    } else {\n      clearTimeout(newCellTimer)\n\n      return R.pipe(\n        initCells,\n        R.assoc('levelComplete', R.T())\n      )(state)\n    }\n  }\n\n  function timeOut (state) {\n    let loseStatus = false\n    state.cells.map(cell => {\n      if (cell.countdown === 1 && cell.label === 'TAP') {\n        loseStatus = true\n        clearTimeout(newCellTimer)\n      }\n    })\n\n    return loseStatus\n  }\n\n  function switchWaitToTap (cell) {\n    return cell.countdown === 1 && cell.label === 'WAIT'\n      ? { label: 'TAP', countdown: 4, index: cell.index }\n      : cell\n  }\n\n  // function gameIsPassed (state) {\n  //   return {\n  //     ...state,\n  //     gameIsPassed: true\n  //   }\n  // }\n\n  // function startLevelBtnHandler () {\n  //   action$.plug(startLevel)\n  //   action$.plug(initCells)\n  //   action$.plug(activateRandomCell)\n  // }\n\n  // function startNewGameBtnHandler () {\n  //   action$.plug(startGame)\n  //   action$.plug(initCells)\n  //   action$.plug(activateRandomCell)\n  // }\n\n  action$.plug(initCells)\n\n  // --------------------------------------------------------------------\n\n  const Component = attach(\n    { state: state$ },\n    ({ state }) => <View activePanel=\"main\">\n      <Panel id=\"main\" theme={'white'}>\n        <PanelHeader transparent={true} noShadow={true}>\n          Switch\n        </PanelHeader>\n\n        <div className=\"game\">\n          <div className=\"game-progress\">\n            <ProgressBar label={'Уровень'}\n              value={state.level} />\n\n            <ProgressBar label={'Счет'}\n              value={state.score} />\n\n            <ProgressBar label={'Топ'}\n              value={state.best} />\n          </div>\n\n          <Grid state={state}\n            onCellTap={onCellTap}/>\n        </div>\n      </Panel>\n    </View>\n  )\n\n  return <Component/>\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport Game from './components/Game'\nimport connect from '@vkontakte/vk-connect'\nimport '@vkontakte/vkui/dist/vkui.css'\nimport './styles/main.scss'\n\nconnect.send(\"VKWebAppInit\", {})\n\nReactDOM.render(\n  <Game/>,\n  document.getElementById('app')\n)\n","import K from 'kefir'\n\nexport const pool = () => {\n  const pool = K.pool()\n  const _plug = pool.plug.bind(pool)\n  pool.plug = function (x) {\n    if (x instanceof K.Property || x instanceof K.Stream || x instanceof K.Observable) {\n      _plug(x)\n    } else {\n      _plug(K.constant(x))\n    }\n  }\n  return pool\n}\n","import React, { Component } from 'react'\nimport * as R from '@paqmind/ramda'\nimport * as K from 'kefir'\n\nexport const connect = (streamsToProps, ComponentToWrap) => {\n  class Container extends Component {\n    constructor (props) {\n      super(props)\n      this.state = {}\n    }\n\n    UNSAFE_componentWillMount () {\n      const props$ = K.combine(streamsToProps)\n        .throttle(20, { leading: false })\n\n      this.sb = props$.observe(data => {\n        this.setState(data)\n      })\n    }\n\n    componentWillUnmount () {\n      this.sb.unsubscribe()\n    }\n\n    render () {\n      return React.createElement(ComponentToWrap, R.merge(this.props, this.state), this.props.children)\n    }\n  }\n\n  return Container\n}\n"],"sourceRoot":""}